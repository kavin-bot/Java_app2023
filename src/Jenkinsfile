pipeline{
    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description:'choose create/delete')
    }
 stages{
    stage("checkouts"){
        when{ expression { params.action =='create'}}
        steps{
            script{
                git branch: 'main', url: 'https://github.com/kavin-bot/Java_app2023.git'
            }
        }
    } 
    stage("Maven: UnitTest"){
        when{ expression { params.action =='create'}}
        steps{
            script{
                sh 'mvn test'
            }
        }
    }
    stage("IntegrationTest:Maven"){
        when{ expression { params.action =='create'}}
        steps{
            script{
                sh 'mvn verify -DskipUnitTests'
            }
        }
    } 
    stage("StaticCodeAnalysis"){
        when{ expression { params.action =='create'}}
        steps{
            script{
                withSonarQubeEnv(credentialsId: 'jenkinsonar'){
                     sh 'mvn clean package sonar:sonar'
                }
                
            }
        }
    } 
    stage("QualityGate"){
        when{ expression { params.action =='create'}}
        steps{
            script{
                waitForQualityGate abortPipeline: false, credentialsId: 'jenkinsonar'
            }
        }
    } 
    stage("mavenBuild"){
        when{ expression { params.action =='create'}}
        steps{
            script{
               sh 'mvn clean install'
            }
        }
    } 
    stage("DockerBuild"){
        when{ expression { params.action =='create'}}
        steps{
            script{
               sh """

               docker build -t springboot/javaapp:${env.BUILD_ID} .

              docker tag springboot dockerkavin/javaapp:latest
               """
            }
        }
    } 
     stage("DockerImagescanTrivy"){
        when{ expression { params.action =='create'}}
        steps{
            script{
               sh """
            
               trivy image dockerkavin/javaapp:${env.BUILD_ID} >scan.txt
               cat scan.txt
               """
            }
        }
    } 
    stage("DockerPush"){
        when{ expression { params.action =='create'}}
        steps{
            script{
               withCredentials([usernamePassword(credentialsId: 'dockerkavin', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                sh """ 
                
                docker push dockerkavin/javaapp:latest 
                """
                    } 
            }
        }
    } 
 }
}

